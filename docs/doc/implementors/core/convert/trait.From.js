(function() {var implementors = {};
implementors["rdf_rs"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"rdf_rs/core/struct.Uri.html\" title=\"struct rdf_rs::core::Uri\">Uri</a>&gt; for <a class=\"struct\" href=\"rdf_rs/core/struct.Resource.html\" title=\"struct rdf_rs::core::Resource\">Resource</a>","synthetic":false,"types":["rdf_rs::core::resource::Resource"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"rdf_rs/core/struct.Uri.html\" title=\"struct rdf_rs::core::Uri\">Uri</a>&gt; for <a class=\"struct\" href=\"rdf_rs/core/struct.Relationship.html\" title=\"struct rdf_rs::core::Relationship\">Relationship</a>","synthetic":false,"types":["rdf_rs::core::relationship::Relationship"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'_ <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"rdf_rs/core/struct.Literal.html\" title=\"struct rdf_rs::core::Literal\">Literal</a>","synthetic":false,"types":["rdf_rs::core::object::Literal"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a><a class=\"struct\" href=\"rdf_rs/core/struct.Resource.html\" title=\"struct rdf_rs::core::Resource\">Resource</a>, <a class=\"struct\" href=\"rdf_rs/core/struct.Relationship.html\" title=\"struct rdf_rs::core::Relationship\">Relationship</a>, <a class=\"enum\" href=\"rdf_rs/core/enum.Object.html\" title=\"enum rdf_rs::core::Object\">Object</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt; for <a class=\"struct\" href=\"rdf_rs/core/struct.Triple.html\" title=\"struct rdf_rs::core::Triple\">Triple</a>","synthetic":false,"types":["rdf_rs::core::triple::Triple"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"rdf_rs/core/struct.Triple.html\" title=\"struct rdf_rs::core::Triple\">Triple</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a><a class=\"struct\" href=\"rdf_rs/core/struct.Resource.html\" title=\"struct rdf_rs::core::Resource\">Resource</a>, <a class=\"struct\" href=\"rdf_rs/core/struct.Relationship.html\" title=\"struct rdf_rs::core::Relationship\">Relationship</a>, <a class=\"enum\" href=\"rdf_rs/core/enum.Object.html\" title=\"enum rdf_rs::core::Object\">Object</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>","synthetic":false,"types":["rdf_rs::core::resource::Resource","rdf_rs::core::relationship::Relationship","rdf_rs::core::object::Object"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"rdf_rs/parsing/struct.ParserError.html\" title=\"struct rdf_rs::parsing::ParserError\">ParserError</a>","synthetic":false,"types":["rdf_rs::parsing::base::ParserError"]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"regex/bytes/struct.Match.html\" title=\"struct regex::bytes::Match\">Match</a>&lt;'t&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;","synthetic":false,"types":["core::ops::range::Range"]},{"text":"impl&lt;'t&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"regex/struct.Match.html\" title=\"struct regex::Match\">Match</a>&lt;'t&gt;&gt; for &amp;'t <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"regex/struct.Match.html\" title=\"struct regex::Match\">Match</a>&lt;'t&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;","synthetic":false,"types":["core::ops::range::Range"]}];
implementors["regex_syntax"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"regex_syntax/ast/struct.Error.html\" title=\"struct regex_syntax::ast::Error\">Error</a>&gt; for <a class=\"enum\" href=\"regex_syntax/enum.Error.html\" title=\"enum regex_syntax::Error\">Error</a>","synthetic":false,"types":["regex_syntax::error::Error"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"regex_syntax/hir/struct.Error.html\" title=\"struct regex_syntax::hir::Error\">Error</a>&gt; for <a class=\"enum\" href=\"regex_syntax/enum.Error.html\" title=\"enum regex_syntax::Error\">Error</a>","synthetic":false,"types":["regex_syntax::error::Error"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()